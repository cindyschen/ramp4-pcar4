import{U as m,s,ak as p}from"./main-BeUku7ae.js";import{p as n}from"./MeshVertexAttributes-sl_wlwsQ.js";import{B as a}from"./vertexSpaceConversion-R8o-1cL1.js";import"./preload-helper-ExcqyqRp.js";import"./meshProperties-C4iW0Ukm.js";import"./mat3-CruJiiUv.js";import"./common-DQOJ18NT.js";import"./mat3f64-q3fE-ZOt.js";import"./mat4-Bfb4HCRp.js";import"./mat4f64-Dk4dwAN8.js";import"./vec32-DtrNyzQt.js";import"./spatialReferenceEllipsoidUtils-DSVhDqbC.js";import"./computeTranslationToOriginAndRotation-DSztIdFQ.js";import"./projection-D3CLHR7i.js";import"./projectPointToVector-FAb3aDbh.js";import"./meshVertexSpaceUtils-BdttAgVC.js";import"./MeshLocalVertexSpace-BZvrLei9.js";import"./vec3-LY64Cpkq.js";import"./BufferView-3iXv2QZ-.js";import"./vec2-maR1OrZI.js";import"./vec42-CKs01hkn.js";import"./vec4-9-MOWQJy.js";async function P(t,r,o){await Promise.resolve(),m(o);const e=a(t,r,{useEllipsoid:o?.useEllipsoid});if(!e)throw new s("meshUtils:convertVertexSpace()","Failed to convert to provided vertex space due to projection errors");const i=t.cloneAndModifyVertexAttributes(new n({...e,uv:p(t.vertexAttributes.uv),color:p(t.vertexAttributes.color)}),r);return i.transform=null,i}export{P as convertMeshVertexSpace};
